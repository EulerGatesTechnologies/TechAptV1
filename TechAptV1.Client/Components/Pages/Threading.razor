@page "/threading"

@using TechAptV1.Client.Services;
@using TechAptV1.Client.Models;

@inject IThreadingService ThreadingService
@inject IDataService DataService

@inject IJSRuntime JS

<h3>Threading &amp; Data Persistence</h3>

<div>
    <button class="btn btn-primary" @onclick="(async () => await this.StartAsync())" disabled="@isComputing">Start</button>
    <button class="btn btn-primary" @onclick="(async () => await this.SaveAsync())" disabled="@(IsDataAvailable==false)">Save</button>
</div>

@if (isComputing == true)
{
    <p>Computing... Please wait...</p>
}
else if(Result != null)
{
    <div>
        <hr>
        <h4>Numbers:</h4>
        <ul>
            <li>Odd:    <strong>@(this.Result?.OddNumbersCount      ??  0)</strong></li>
            <li>Even:   <strong>@(this.Result?.EvenNumbersCount     ??  0)</strong></li>
            <li>Prime:  <strong>@(this.Result?.PrimeNumbersCount    ??  0)</strong></li>
            <li>Total:  <strong>@(this.Result?.TotalNumbersCount    ??  0)</strong></li>
        </ul>
        <hr>
    </div>
}

@if (isSaving == true)
{
    <p>Saving... @saveProgress%</p>
}

@code {

    [Inject] public required ILogger<Threading> Logger { get; set; }

    private bool isSaving = false;
    private int saveProgress = 0;
    private bool isComputing = false;
    private bool IsDataAvailable => (Result != null) && (isComputing == false) && (isSaving == false); // Assert we are ready with data to be saved

    private (List<Number> Numbers, int TotalNumbersCount, int OddNumbersCount, int EvenNumbersCount, int PrimeNumbersCount)? Result { get; set;}

    private async Task StartAsync()
    {
        isComputing = true;

        this.Logger.LogInformation(nameof(StartAsync));

        try
        {

            if (ThreadingService is ThreadingService threadingService)
            {
                this.Logger.LogInformation("Computation Started...");

                await ThreadingService.StartAsync();

                Result = (threadingService.GetNumbers(), threadingService.GetTotalNumbers(), threadingService.GetOddNumbers(), threadingService.GetEvenNumbers(), threadingService.GetPrimeNumbers());

                this.Logger.LogInformation("Computation Completed...");
            }
            else
            {
                this.Logger.LogWarning("ThreadingService is not of type IThreadingService");

                await JS.InvokeVoidAsync("alert", "ThreadingService is not of type IThreadingService.");
            }
        }
        catch (Exception exception)
        {
            this.Logger.LogError(exception, nameof(exception));

            Result = null;
        }
        finally
        {
            isComputing = false;

            StateHasChanged();
        }
    }

    private async Task SaveAsync()
    {
        this.Logger.LogInformation(nameof(SaveAsync));

        if(Result != null)
        {
            isSaving = true;

            saveProgress = 0;

            var progress =  new Progress<int>((percent) =>
            {
                saveProgress = percent;

                StateHasChanged();
            });

            try
            {
                if (ThreadingService is ThreadingService threadingService)
                {
                    this.Logger.LogInformation($"Saving Started...");

                    // Run the save operation on a background thread
                    await DataService.SaveAsync(Result.Value.Numbers, progress);

                    this.Logger.LogInformation("Saving Completed...");

                    await JS.InvokeVoidAsync("alert", "Saving Completed...");
                }
                else
                {
                    this.Logger.LogWarning("ThreadingService is not of type IThreadingService");

                    await JS.InvokeVoidAsync("alert", "ThreadingService is not of type IThreadingService.");
                }
            }
            catch(Exception exception)
            {
                this.Logger.LogError(exception.Message, nameof(SaveAsync));

                Result = null;
            }
            finally
            {
                isSaving = false;

                saveProgress = 0;

                StateHasChanged();
            }
        }
    }
}
