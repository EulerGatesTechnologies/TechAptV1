@page "/threading"

@using TechAptV1.Client.Services;
@using TechAptV1.Client.Models;

@inject IThreadingService ThreadingService
@inject IDataService DataService
@inject IJSRuntime JS

<h3>Threading &amp; Data Persistence</h3>

@if (IsComputing)
{
    <p>Computing... Please wait.</p>
}


<div>
    <button class="btn btn-primary" @onclick="(async () => await this.StartAsync())" disabled="@IsComputing">Start</button>
    <button class="btn btn-primary" @onclick="(async () => await this.SaveAsync())">Save</button>
</div>
<div>
    <hr>
    <h4>Numbers:</h4>
    <ul>
        <li>Odd:    <strong>@this.Result?.OddNumbersCount</strong></li>
        <li>Even:   <strong>@this.Result?.EvenNumbersCount</strong></li>
        <li>Prime:  <strong>@this.Result?.PrimeNumbersCount</strong></li>
        <li>Total:  <strong>@this.Result?.TotalNumbersCount</strong></li>
    </ul>
    <hr>
</div>

@code {

    [Inject] public required ILogger<Threading> Logger { get; set; }

    private int _oddNumbers = 0;
    private int _evenNumbers = 0;
    private int _primeNumbers = 0;
    private int _totalNumbers = 0;

    private bool IsComputing { get; set; } = false;

    private CancellationTokenSource CancellationTokenSource { get; set; } = new();

    private (List<Number> Numbers, int TotalNumbersCount, int OddNumbersCount, int EvenNumbersCount, int PrimeNumbersCount)? Result { get; set;}

    private async Task StartAsync()
    {
        this.Logger.LogInformation(nameof(StartAsync));

        IsComputing = true;

        try
        {
            Result = await ThreadingService.ComputeNumbersAsync(CancellationTokenSource.Token);
        }
        catch (OperationCanceledException)
        {
            Result = null;
        }
        finally
        {
            IsComputing = false;

            StateHasChanged();
        }
    }

    private async Task SaveAsync()
    {
        this.Logger.LogInformation("Save");
        throw new NotImplementedException();
    }

}
